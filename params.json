{
  "name": "Leaflet-WFST",
  "tagline": "",
  "body": "#Leaflet-WFST\r\n[![Build Status](https://travis-ci.org/Flexberry/Leaflet-WFST.svg?branch=master)](https://travis-ci.org/Flexberry/Leaflet-WFST)\r\n\r\nOGC WFS-T client layer for leaflet.\r\n\r\n#Initialization options\r\n```javascript\r\n   options: {\r\n        crs: L.CRS.EPSG3857,\r\n        showExisting: true,\r\n        geometryField: 'Shape',\r\n        url: '',\r\n        typeNS: '',\r\n        typeName: '',\r\n        style: {\r\n            color: 'black',\r\n            weight: 1\r\n        }\r\n    }\r\n\r\n```\r\n\r\n|option name|default|comment|\r\n|-----------|-------|-------|\r\n|crs|L.CRS.EPSG3857|spatial reference system for layer, should implement [ICRS](http://leafletjs.com/reference.html#icrs), for example [Proj4Leaflet](https://github.com/kartena/Proj4Leaflet) |\r\n|showExisting|true|load existing features on create layer|\r\n|geometryField|'Shape'|field for storing geometries, for non transaction services may be ommited|\r\n|url|-|WFS url, for example http://demo.opengeo.org/geoserver/osm/ows\r\n|typeNS|-|type namespace|\r\n|typeName|-|type name|\r\n|typeNSName|-|type namespace name|\r\n|namespaceUri|-|namespace URI|\r\n|style|-|leaflet vector style|\r\n|filter|-|any filter. see [filter](#filter)|\r\n|maxFeatures|-|limit the amount of features returned|\r\n\r\n#Basic WFS example - [view](http://flexberry.github.io/Leaflet-WFST/examples/tasmania.html)\r\n```javascript\r\nvar map = L.map('map').setView([0, 0], 2);\r\n\r\nvar boundaries = new L.WFS({\r\n    url: 'http://demo.opengeo.org/geoserver/ows',\r\n    typeNS: 'topp',\r\n    typeName: 'tasmania_state_boundaries',\r\n    crs: L.CRS.EPSG4326,\r\n    style: {\r\n        color: 'blue',\r\n        weight: 2\r\n    }\r\n}).addTo(map)\r\n        .on('load', function () {\r\n            map.fitBounds(boundaries);\r\n        })\r\n```\r\n\r\n#Methods\r\nExtends leaflet classes with toGml(crs) function:\r\n* L.Marker\r\n* L.Polygon\r\n* L.Polyline\r\n* L.MultiPolygon\r\n* L.MultiPolyline\r\n* L.LatLngBounds\r\n\r\n#Events\r\nTriggers two type of events:\r\n* load - triggers when both 'DescribeFeatureType' & 'GetFeature' requests succeed, and features have been successfully parsed into leaflet layers\r\n* error - triggers when any 'DescribeFeatureType' or 'GetFeature' request fails, and features haven't been parsed into leaflet layers\r\n\r\nMarkers geometry writes as posNode, for all other layers geometry writes as posList\r\n\r\n# Filter\r\n\r\nOGC Filter realization:\r\n\r\n##GmlObjectID filter\r\n\r\nExample:\r\n```javascript\r\n  var filter = new L.Filter.GmlObjectID().append(1);\r\n  filter.toGml()\r\n```\r\ncode above will return xml:\r\n```xml\r\n  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\r\n    <ogc:GmlObjectId xmlns:gml=\"http://www.opengis.net/gml\" gml:id=\"1\" />\r\n  </ogc:Filter>\r\n```\r\nto load feature by id pass filter to WFS-layer options:\r\n```javascript\r\n  var wfs = new L.WFS({\r\n    filter: new L.Filter.GmlObjectID().append(1)\r\n  });\r\n```\r\n\r\n##EQ filter\r\n\r\nExample:\r\n```javascript\r\n  var filter = new L.Filter.EQ().append('city', 'Perm');\r\n  filter.toGml()\r\n```\r\ncode above will return xml:\r\n```xml\r\n  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\r\n    <ogc:PropertyIsEqualTo>\r\n      <ogc:PropertyName>city</ogc:PropertyName>\r\n      <ogc:Literal>Perm</ogc:Literal>\r\n    </ogc:PropertyIsEqualTo>\r\n  </ogc:Filter>\r\n```\r\nto load features by some property equality to the specified value pass filter to WFS-layer options:\r\n```javascript\r\n  var wfs = new L.WFS({\r\n    filter: new L.Filter.EQ().append('city', 'Perm')\r\n  });\r\n```\r\n\r\n##BBox filter\r\n\r\nExample:\r\n```javascript\r\n    var filter = new L.Filter.BBox().append(L.latLngBounds(L.latLng(40.712, -74.227), L.latLng(40.774, -74.125)), 'ogr_geometry', L.CRS.EPSG4326);\r\n    filter.toGml()\r\n```\r\ncode above will return xml:\r\n```xml\r\n  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\r\n    <ogc:BBOX>\r\n      <ogc:PropertyName>ogr_geometry</ogc:PropertyName>\r\n      <gml:Envelope xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4326\">\r\n        <gml:lowerCorner>-74.227 40.712</gml:lowerCorner>\r\n        <gml:upperCorner>-74.125 40.774</gml:upperCorner>\r\n      </gml:Envelope>\r\n    </ogc:BBOX>\r\n  </ogc:Filter>\r\n```\r\nto load features by bbox pass filter to WFS-layer options:\r\n```javascript\r\n  var wfs = new L.WFS({\r\n    filter: new L.Filter.BBox().append(L.latLngBounds(L.latLng(40.712, -74.227), L.latLng(40.774, -74.125)), 'ogr_geometry', L.CRS.EPSG4326)\r\n  });\r\n```\r\n\r\n##Intersects filter\r\n\r\nExample:\r\n```javascript\r\n  var filter = new L.Filter.Intersects().append(L.polygon([L.latLng(40.712, -74.227), L.latLng(40.774, -74.125), L.latLng(40.734, -74.175)]), 'ogr_geometry', L.CRS.EPSG4326);\r\n  filter.toGml();\r\n```\r\ncode above will return xml:\r\n```xml\r\n  <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\">\r\n    <ogc:Intersects>\r\n      <ogc:PropertyName>ogr_geometry</ogc:PropertyName>\r\n      <gml:Polygon xmlns:gml=\"http://www.opengis.net/gml\" srsName=\"EPSG:4326\" srsDimension=\"2\">\r\n        <gml:exterior>\r\n          <gml:LinearRing srsDimension=\"2\">\r\n            <gml:posList>-74.227 40.712 -74.125 40.774 -74.175 40.734 -74.227 40.712</gml:posList>\r\n          </gml:LinearRing>\r\n        </gml:exterior>\r\n      </gml:Polygon>\r\n    </ogc:Intersects>\r\n  </ogc:Filter>\r\n```\r\nto load features by intersection with the specified geometry pass filter to WFS-layer options:\r\n```javascript\r\n  var wfs = new L.WFS({\r\n    filter: new L.Filter.Intersects().append(L.polygon([L.latLng(40.712, -74.227), L.latLng(40.774, -74.125), L.latLng(40.734, -74.175)]), 'ogr_geometry', L.CRS.EPSG4326)\r\n  });\r\n```\r\n\r\n#WFST Example\r\nEditing plugin - [Leaflet.Editable](https://github.com/yohanboniface/Leaflet.Editable)\r\n```javascript\r\nL.WFST.include(MultiEditableMixin);\r\n\r\nvar wfst = new L.WFST({\r\n    url: 'http://myserver/geoserver/ows',\r\n    typeNS: 'myns',\r\n    typeName: 'POIPOINT',\r\n    style: {\r\n        color: 'blue',\r\n        weight: 2\r\n    }\r\n}).addTo(map).once('load', function () {\r\n            map.fitBounds(wfst);\r\n            wfst.enableEdit();\r\n        });\r\n\r\nmap.on('editable:created', function (e) {\r\n    wfst.addLayer(e.layer);\r\n});\r\n\r\nmap.on('editable:editing', function (e) {\r\n    wfst.editLayer(e.layer);\r\n});\r\n```\r\n\r\nto make \"wfs:Transaction\" POST request call save() method, example with [Leaflet.EasyButton](https://github.com/CliffCloud/Leaflet.EasyButton)\r\n```javascript\r\n L.easyButton('fa-save', function () {\r\n     wfst.save();\r\n }, 'Save changes');\r\n```\r\n\r\n#Layer properties\r\n```javascript\r\n//simple layer\r\nlayer = new L.Marker([0, 0]);\r\nlayer.feature = {\r\n  id: 1,\r\n  properties: {\r\n    a: 'a',\r\n    b: 'b'\r\n  }\r\n};\r\n\r\n//get value by key 'a'\r\nvar a = layer.getProperty('a');\r\n\r\n//change values\r\nlayer.setProperties({\r\n  a: 'b',\r\n  b:'a'\r\n});\r\n\r\n//add new property\r\nlayer.setProperties({\r\n  c:'c'\r\n});\r\n\r\n//delete properties\r\nlayer.deleteProperties(['a','b','c']);\r\n```\r\n\r\n#Demo\r\ndemos for GML read format\r\n* [Markers](http://flexberry.github.io/Leaflet-WFST/examples/markers.html)\r\n* [Polygons](http://flexberry.github.io/Leaflet-WFST/examples/polygon.html)\r\n* [Polylines](http://flexberry.github.io/Leaflet-WFST/examples/polyline.html)\r\n\r\ndemo for GeoJSON read format\r\n* [Polygons](http://flexberry.github.io/Leaflet-WFST/examples/polygonGeoJSON.html)\r\n\r\ndemo filter bbox\r\n* [BBox](http://flexberry.github.io/Leaflet-WFST/examples/filterBBox.html)\r\n\r\n#License\r\nMIT\r\n",
  "google": "UA-60149862-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}