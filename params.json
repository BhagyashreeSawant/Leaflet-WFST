{"name":"Leaflet-WFST","tagline":"","body":"#Leaflet-WFST \r\n\r\nOGC WFS-T client layer for leaflet.\r\n\r\n#Initialization options\r\n```javascript\r\n   options: {\r\n        crs: L.CRS.EPSG3857,\r\n        showExisting: true,\r\n        geometryField: 'Shape',\r\n        url: '',\r\n        typeNS: '',\r\n        typeName: '',\r\n        style: {\r\n            color: 'black',\r\n            weight: 1\r\n        }\r\n    }\r\n    \r\n```\r\n\r\n|option name|default|comment|\r\n|-----------|-------|-------|\r\n|crs|L.CRS.EPSG3857|spatial reference system for layer, should implement [ICRS](http://leafletjs.com/reference.html#icrs), for example [Proj4Leaflet](https://github.com/kartena/Proj4Leaflet) |\r\n|showExisting|true|load existing features on create layer|\r\n|geometryField|'Shape'|field for storing geometries, for non transaction services may be ommited|\r\n|url|-|WFS url, for example http://demo.opengeo.org/geoserver/osm/ows\r\n|typeNS|-|type namespace|\r\n|typeName|-|type name|\r\n|style|-|leaflet vector style|\r\n\r\n#Basic WFS example - [view](http://flexberry.github.io/Leaflet-WFST/examples/tasmania.html)\r\n```javascript\r\nvar map = L.map('map').setView([0, 0], 2);\r\n\r\nvar boundaries = new L.WFS({\r\n    url: 'http://demo.opengeo.org/geoserver/ows',\r\n    typeNS: 'topp',\r\n    typeName: 'tasmania_state_boundaries',\r\n    crs: L.CRS.EPSG4326,\r\n    style: {\r\n        color: 'blue',\r\n        weight: 2\r\n    }\r\n}).addTo(map)\r\n        .on('load', function () {\r\n            map.fitBounds(boundaries);\r\n        })\r\n```\r\n\r\n#Methods\r\nExtends leaflet classes with toGml(crs) function:\r\n* L.Marker\r\n* L.Polygon\r\n* L.Polyline\r\n* L.MultiPolygon\r\n* L.MultiPolyline\r\n\r\nMarkers geometry writes as posNode, for all other layers geometry writes as posList\r\n\r\n#Filter\r\nOGC Filter realization:\r\n##GmlObjectId filter\r\nExample:\r\n```javascript\r\nvar filter = new L.Filter.GmlObjectId();\r\nfilter.append(1);\r\nfilter.toGml()\r\n```\r\ncode above will return:\r\n```xml\r\n<ogc:Filter>\r\n    <ogc:GmlObjectId gml:id=1/>\r\n</ogc:Filter>\r\n```\r\n\r\n#WFST Example\r\nEditing plugin - [Leaflet.Editable](https://github.com/yohanboniface/Leaflet.Editable)\r\n```javascript\r\nL.WFS.Transaction.include(MultiEditableMixin);\r\n\r\nvar wfst = new L.WFS.Transaction({\r\n    url: 'http://myserver/geoserver/ows',\r\n    typeNS: 'myns',\r\n    typeName: 'POIPOINT',\r\n    style: {\r\n        color: 'blue',\r\n        weight: 2\r\n    }\r\n}).addTo(map).once('load', function () {\r\n            map.fitBounds(wfst);\r\n            wfst.enableEdit();\r\n        });\r\n        \r\nmap.on('editable:created', function (e) {\r\n    wfst.addLayer(e.layer);\r\n});\r\n\r\nmap.on('editable:editing', function (e) {\r\n    wfst.editLayer(e.layer);\r\n});\r\n```\r\n\r\nto make \"wfs:Transaction\" POST request call save() method, example with [Leaflet.EasyButton](https://github.com/CliffCloud/Leaflet.EasyButton)\r\n```javascript\r\n L.easyButton('fa-save', function () {\r\n     wfst.save();\r\n }, 'Save changes');\r\n```\r\n\r\n#Demo\r\ndemos for GML read format\r\n* [Markers](http://flexberry.github.io/Leaflet-WFST/examples/markers.html)\r\n* [Polygons](http://flexberry.github.io/Leaflet-WFST/examples/polygon.html)\r\n* [Polylines](http://flexberry.github.io/Leaflet-WFST/examples/polyline.html)\r\n\r\ndemo for GeoJSON read format\r\n* [Polygons](http://flexberry.github.io/Leaflet-WFST/examples/polygonGeoJSON.html)\r\n\r\n#License\r\nMIT\r\n\r\n\r\n","google":"UA-60149862-1","note":"Don't delete this file! It's used internally to help with page regeneration."}